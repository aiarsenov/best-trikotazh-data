#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ dbt –º–æ–¥–µ–ª–µ–π –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏
"""

import json
import subprocess
import os
from clickhouse_driver import Client

def get_clickhouse_client():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ ClickHouse –∫–ª–∏–µ–Ω—Ç–∞"""
    config = {
        "host": "rc1a-ioasjmp8oohqnaeo.mdb.yandexcloud.net",
        "port": 9440,
        "user": "databaseuser",
        "password": os.getenv("CLICKHOUSE_PASSWORD"),
        "database": "best-tricotaz-analytics",
        "secure": True,
        "verify": True
    }
    
    try:
        return Client(**config)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ ClickHouse: {e}")
        return None

def check_raw_data():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ raw —Ç–∞–±–ª–∏—Ü–∞—Ö"""
    ch = get_clickhouse_client()
    if not ch:
        return
    
    print("üîç –ü–†–û–í–ï–†–ö–ê RAW –î–ê–ù–ù–´–•")
    print("=" * 50)
    
    tables = ["wb_keywords_raw", "wb_campaigns_raw", "ozon_products_raw", "onec_entities_raw"]
    
    for table in tables:
        try:
            result = ch.execute(f"SELECT count() FROM {table}")
            count = result[0][0]
            print(f"üìä {table}: {count} –∑–∞–ø–∏—Å–µ–π")
            
            if count > 0:
                # –ü—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö (–º–∞–∫—Å–∏–º—É–º 2)
                samples = ch.execute(f"SELECT payload FROM {table} LIMIT 2")
                for i, (payload,) in enumerate(samples, 1):
                    try:
                        data = json.loads(payload)
                        if 'keyword' in data:
                            print(f"  üìù –ü—Ä–∏–º–µ—Ä {i}: {data.get('keyword', 'N/A')}")
                        elif 'name' in data:
                            print(f"  üìù –ü—Ä–∏–º–µ—Ä {i}: {data.get('name', 'N/A')}")
                        elif 'entity' in data:
                            print(f"  üìù –ü—Ä–∏–º–µ—Ä {i}: {data.get('entity', 'N/A')}")
                        else:
                            print(f"  üìù –ü—Ä–∏–º–µ—Ä {i}: {json.dumps(data)[:50]}...")
                    except Exception as e:
                        print(f"  ‚ùå –ü—Ä–∏–º–µ—Ä {i}: –æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è JSON: {e}")
                        print(f"      Payload: {payload[:100]}...")
        
        except Exception as e:
            print(f"‚ùå {table}: —Ç–∞–±–ª–∏—Ü–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –æ—à–∏–±–∫–∞ - {e}")
    
    print()

def run_dbt_fresh():
    """–ó–∞–ø—É—Å–∫ dbt —Å –ø–æ–ª–Ω—ã–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º"""
    print("üîÑ –ó–ê–ü–£–°–ö DBT –ú–û–î–ï–õ–ï–ô")
    print("=" * 50)
    
    try:
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é dbt –ø—Ä–æ–µ–∫—Ç–∞
        os.chdir("/home/vasiliy_arsenov/etl/dbt/best_tricotaz")
        
        # –ü–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ staging –º–æ–¥–µ–ª–µ–π
        print("üìù –ó–∞–ø—É—Å–∫ staging –º–æ–¥–µ–ª–µ–π...")
        result = subprocess.run(
            ["dbt", "run", "--select", "staging", "--full-refresh"],
            capture_output=True,
            text=True,
            timeout=120
        )
        
        if result.returncode == 0:
            print("‚úÖ dbt staging –º–æ–¥–µ–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
            print("üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç:")
            print(result.stdout)
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è dbt:")
            print(result.stderr)
            
    except subprocess.TimeoutExpired:
        print("‚è∞ –¢–∞–π–º–∞—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è dbt (120 —Å–µ–∫)")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ dbt: {e}")

def check_staging_data():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ staging —Ç–∞–±–ª–∏—Ü–∞—Ö"""
    ch = get_clickhouse_client()
    if not ch:
        return
    
    print("\nüîç –ü–†–û–í–ï–†–ö–ê STAGING –î–ê–ù–ù–´–•")
    print("=" * 50)
    
    staging_tables = ["stg_wb_keywords"]
    
    for table in staging_tables:
        try:
            # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            result = ch.execute(f"SELECT count() FROM {table}")
            count = result[0][0]
            print(f"üìä {table}: {count} –∑–∞–ø–∏—Å–µ–π")
            
            if count > 0:
                # –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                result = ch.execute(f"""
                    SELECT 
                        date,
                        campaignid,
                        keyword,
                        impressions,
                        clicks,
                        cost,
                        _ingested_at
                    FROM {table}
                    ORDER BY date DESC
                    LIMIT 5
                """)
                
                print(f"üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏:")
                for row in result:
                    date, campaign_id, keyword, impressions, clicks, cost, ingested_at = row
                    print(f"  üìÖ {date} | üÜî {campaign_id} | üîë {keyword}")
                    print(f"       üëÜ {impressions} –ø–æ–∫–∞–∑–æ–≤ | üëÜ {clicks} –∫–ª–∏–∫–æ–≤ | üí∞ {cost} —Ä—É–±.")
                    print(f"       ‚è∞ –ó–∞–≥—Ä—É–∂–µ–Ω–æ: {ingested_at}")
                    print("-" * 60)
            
        except Exception as e:
            print(f"‚ùå {table}: –æ—à–∏–±–∫–∞ - {e}")

def test_json_parsing():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –≤ ClickHouse"""
    ch = get_clickhouse_client()
    if not ch:
        return
    
    print("\nüß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–ê–†–°–ò–ù–ì–ê JSON")
    print("=" * 50)
    
    try:
        # –¢–µ—Å—Ç –Ω–∞ raw –¥–∞–Ω–Ω—ã—Ö
        result = ch.execute("""
            SELECT 
                payload,
                JSON_VALUE(payload, '$.date') as parsed_date,
                JSON_VALUE(payload, '$.keyword') as parsed_keyword,
                JSON_VALUE(payload, '$.impressions') as parsed_impressions,
                isValidJSON(payload) as is_valid_json
            FROM wb_keywords_raw 
            LIMIT 3
        """)
        
        print("üìã –¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:")
        for payload, parsed_date, parsed_keyword, parsed_impressions, is_valid in result:
            print(f"  üìÑ Payload: {payload[:50]}...")
            print(f"  üìÖ Parsed date: {parsed_date}")
            print(f"  üîë Parsed keyword: {parsed_keyword}")
            print(f"  üëÜ Parsed impressions: {parsed_impressions}")
            print(f"  ‚úÖ Valid JSON: {bool(is_valid)}")
            print("-" * 40)
    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è JSON: {e}")

def full_pipeline_test():
    """–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –ø–∞–π–ø–ª–∞–π–Ω–∞: raw ‚Üí staging ‚Üí –ø—Ä–æ–≤–µ—Ä–∫–∞"""
    print("üöÄ –ü–û–õ–ù–´–ô –¢–ï–°–¢ –ü–ê–ô–ü–õ–ê–ô–ù–ê")
    print("=" * 60)
    
    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ raw –¥–∞–Ω–Ω—ã—Ö
    check_raw_data()
    
    # 2. –ó–∞–ø—É—Å–∫ dbt —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏
    run_dbt_fresh()
    
    # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ staging –¥–∞–Ω–Ω—ã—Ö
    check_staging_data()
    
    # 4. –¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON
    test_json_parsing()
    
    print("\nüéâ –¢–ï–°–¢ –ü–ê–ô–ü–õ–ê–ô–ù–ê –ó–ê–í–ï–†–®–ï–ù!")
    print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã—à–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º.")

if __name__ == "__main__":
    import sys
    
    command = sys.argv[1] if len(sys.argv) > 1 else "full"
    
    if command == "raw":
        check_raw_data()
    elif command == "dbt":
        run_dbt_fresh()
    elif command == "staging":
        check_staging_data()
    elif command == "json":
        test_json_parsing()
    elif command == "full":
        full_pipeline_test()
    else:
        print("""
üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ dbt –∏ ClickHouse –ø–∞–π–ø–ª–∞–π–Ω–∞

–ö–æ–º–∞–Ω–¥—ã:
  python examples/dbt_testing.py full      # –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –ø–∞–π–ø–ª–∞–π–Ω–∞
  python examples/dbt_testing.py raw       # –ü—Ä–æ–≤–µ—Ä–∫–∞ raw —Ç–∞–±–ª–∏—Ü
  python examples/dbt_testing.py dbt       # –ó–∞–ø—É—Å–∫ dbt –º–æ–¥–µ–ª–µ–π
  python examples/dbt_testing.py staging   # –ü—Ä–æ–≤–µ—Ä–∫–∞ staging —Ç–∞–±–ª–∏—Ü
  python examples/dbt_testing.py json      # –¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
  - –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π dbt-clickhouse
  - –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π dbt –ø—Ä–æ–µ–∫—Ç –≤ ~/etl/dbt/best_tricotaz/
  - –î–æ—Å—Ç—É–ø –∫ ClickHouse –Ω–∞ –ø–æ—Ä—Ç—É 9440
  - –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è CLICKHOUSE_PASSWORD –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏
        """)
