#!/usr/bin/env python3
"""
–ë–∞–∑–æ–≤—ã–µ –ø—Ä–∏–º–µ—Ä—ã Producer/Consumer –¥–ª—è Kafka
"""

import json
import time
import os
from confluent_kafka import Producer, Consumer

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Kafka
KAFKA_CONFIG = {
    "bootstrap.servers": "89.169.152.54:9092",
    "client.id": "etl-examples"
}

def send_test_data():
    """–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å: –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ Kafka"""
    producer = Producer(KAFKA_CONFIG)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ WB keywords
    test_data = [
        {
            "date": "2024-01-01", 
            "campaign_id": 12345, 
            "keyword": "—Ç—Ä–∏–∫–æ—Ç–∞–∂ –º—É–∂—Å–∫–æ–π",
            "impressions": 1000, 
            "clicks": 50, 
            "cost": 250.75
        },
        {
            "date": "2024-01-02",
            "campaign_id": 12346, 
            "keyword": "—Ñ—É—Ç–±–æ–ª–∫–∞ —Ö–ª–æ–ø–æ–∫",
            "impressions": 1500, 
            "clicks": 75, 
            "cost": 350.25
        },
        {
            "date": "2024-01-03",
            "campaign_id": 12347, 
            "keyword": "—Ä—É–±–∞—à–∫–∞ –¥–µ–ª–æ–≤–∞—è",
            "impressions": 800, 
            "clicks": 40, 
            "cost": 200.00
        }
    ]
    
    try:
        for data in test_data:
            message = json.dumps(data)
            producer.produce(
                "wb_keywords",
                message.encode('utf-8'),
                callback=lambda err, msg: print(f"Delivered: {msg.topic()} at {msg.partition()}:{msg.offset()}") if not err else print(f"Failed: {err}")
            )
            print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {data['keyword']}")
        
        producer.flush()
        print(f"‚úÖ –í—Å–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {len(test_data)} —Å–æ–æ–±—â–µ–Ω–∏–π")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")

def consume_to_console():
    """–ö–æ–Ω—Å—å—é–º–µ—Ä: —á—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Kafka –∏ –≤—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å"""
    consumer_config = {
        "bootstrap.servers": KAFKA_CONFIG["bootstrap.servers"],
        "group.id": f"console-consumer-{int(time.time())}",
        "auto.offset.reset": "earliest",
        "enable.auto.commit": True
    }
    
    consumer = Consumer(consumer_config)
    consumer.subscribe(["wb_keywords"])
    
    try:
        print("üëÇ –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π (Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞)...")
        
        while True:
            msg = consumer.poll(timeout=1.0)
            
            if msg is None:
                continue
            
            if msg.error():
                print(f"‚ùå –û—à–∏–±–∫–∞: {msg.error()}")
                continue
            
            # –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
            data = json.loads(msg.value().decode('utf-8'))
            
            print(f"üì® –ü–æ–ª—É—á–µ–Ω–æ:")
            print(f"   –î–∞—Ç–∞: {data.get('date')}")
            print(f"   –ö–∞–º–ø–∞–Ω–∏—è: {data.get('campaign_id')}")
            print(f"   –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ: {data.get('keyword')}")
            print(f"   –ü–æ–∫–∞–∑—ã: {data.get('impressions')}")
            print(f"   –ö–ª–∏–∫–∏: {data.get('clicks')}")
            print(f"   –°—Ç–æ–∏–º–æ—Å—Ç—å: {data.get('cost')}")
            print("-" * 40)
            
    except KeyboardInterrupt:
        print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Å—å—é–º–µ—Ä–∞...")
    finally:
        consumer.close()

def consume_to_clickhouse():
    """–ö–æ–Ω—Å—å—é–º–µ—Ä: —á—Ç–µ–Ω–∏–µ –∏–∑ Kafka –∏ –∑–∞–ø–∏—Å—å –≤ ClickHouse"""
    from clickhouse_driver import Client
    
    # ClickHouse –∫–ª–∏–µ–Ω—Ç
    ch_config = {
        "host": "rc1a-ioasjmp8oohqnaeo.mdb.yandexcloud.net",
        "port": 9440,
        "user": "databaseuser",
        "password": os.getenv("CLICKHOUSE_PASSWORD"),  # –ò–∑ .env —Ñ–∞–π–ª–∞
        "database": "best-tricotaz-analytics",
        "secure": True,
        "verify": True
    }
    
    try:
        ch = Client(**ch_config)
        print("üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ ClickHouse: OK")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ ClickHouse: {e}")
        return
    
    # Kafka –∫–æ–Ω—Å—å—é–º–µ—Ä
    consumer_config = {
        "bootstrap.servers": KAFKA_CONFIG["bootstrap.servers"],
        "group.id": f"clickhouse-consumer-{int(time.time())}",
        "auto.offset.reset": "earliest",
        "enable.auto.commit": False  # –†—É—á–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ offset
    }
    
    consumer = Consumer(consumer_config)
    consumer.subscribe(["wb_keywords"])
    
    try:
        print("üëÇ –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è ClickHouse...")
        count = 0
        deadline = time.time() + 30  # –¢–∞–π–º–∞—É—Ç 30 —Å–µ–∫—É–Ω–¥
        
        while time.time() < deadline:
            msg = consumer.poll(timeout=1.0)
            
            if msg is None:
                continue
            
            if msg.error():
                print(f"‚ùå –û—à–∏–±–∫–∞ Kafka: {msg.error()}")
                continue
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ JSON –¥–∞–Ω–Ω—ã—Ö
            json_data = msg.value().decode('utf-8')
            data = json.loads(json_data)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ JSON
            if not json_data or json_data.strip() == '':
                print("‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫ –ø—É—Å—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")
                continue
            
            try:
                # –í—Å—Ç–∞–≤–∫–∞ –≤ ClickHouse (raw —Ç–∞–±–ª–∏—Ü–∞)
                ch.execute(
                    "INSERT INTO wb_keywords_raw (payload) VALUES",
                    [[json_data]]
                )
                count += 1
                print(f"üíæ –í—Å—Ç–∞–≤–ª–µ–Ω–æ –≤ ClickHouse: {data.get('keyword', 'unknown')}")
                
                # Commit offset –¥–ª—è Kafka
                consumer.commit(msg)
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ –≤ ClickHouse: {e}")
        
        print(f"‚úÖ –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {count} —Å–æ–æ–±—â–µ–Ω–∏–π")
        
    except KeyboardInterrupt:
        print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Å—å—é–º–µ—Ä–∞...")
    finally:
        consumer.close()

def check_clickhouse_raw_data():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ ClickHouse raw —Ç–∞–±–ª–∏—Ü–µ"""
    from clickhouse_driver import Client
    
    ch_config = {
        "host": "rc1a-ioasjmp8oohqnaeo.mdb.yandexcloud.net",
        "port": 9440,
        "user": "databaseuser",
        "password": os.getenv("CLICKHOUSE_PASSWORD"),
        "database": "best-tricotaz-analytics",
        "secure": True,
        "verify": True
    }
    
    try:
        ch = Client(**ch_config)
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
        count_result = ch.execute("SELECT count() FROM wb_keywords_raw")
        count = count_result[0][0]
        print(f"üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤ raw —Ç–∞–±–ª–∏—Ü–µ: {count}")
        
        if count > 0:
            # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏
            recent_data = ch.execute("""
                SELECT 
                    toString(payload) as json_data,
                    length(payload) as data_length
                FROM wb_keywords_raw 
                ORDER BY tuple() 
                LIMIT 5
            """)
            
            print(f"\nüìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ {len(recent_data)} –∑–∞–ø–∏—Å–µ–π:")
            for i, (json_data, data_length) in enumerate(recent_data, 1):
                try:
                    data = json.loads(json_data)
                    keyword = data.get('keyword', 'N/A')
                    date = data.get('date', 'N/A')
                    print(f"  {i}. {date} | {keyword} | —Ä–∞–∑–º–µ—Ä: {data_length}")
                except:
                    print(f"  {i}. –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON | —Ä–∞–∑–º–µ—Ä: {data_length}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ ClickHouse: {e}")

if __name__ == "__main__":
    import sys
    
    command = sys.argv[1] if len(sys.argv) > 1 else "help"
    
    if command == "send":
        send_test_data()
    elif command == "console":
        consume_to_console()
    elif command == "clickhouse":
        consume_to_clickhouse()
    elif command == "check":
        check_clickhouse_raw_data()
    else:
        print("""
üîß –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Kafka Producer/Consumer

–ö–æ–º–∞–Ω–¥—ã:
  python examples/producer_consumer_examples.py send      # –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
  python examples/producer_consumer_examples.py console   # –ß—Ç–µ–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª—å
  python examples/producer_consumer_examples.py clickhouse # –ß—Ç–µ–Ω–∏–µ –≤ ClickHouse
  python examples/producer_consumer_examples.py check     # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ ClickHouse

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
  - –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (.env —Ñ–∞–π–ª)
  - –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏: confluent_kafka, clickhouse_driver
  - –†–∞–±–æ—Ç–∞—é—â–∏–π Kafka –Ω–∞ 89.169.152.54:9092
  - –î–æ—Å—Ç—É–ø –∫ ClickHouse –Ω–∞ Yandex Cloud
        """)
